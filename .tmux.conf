############################################################################
#         MMP""MM""YMM `7MMM.     ,MMF'`7MMF'   `7MF'`YMM'   `MP'        
#         P'   MM   `7   MMMb    dPMM    MM       M    VMb.  ,P   
#              MM        M YM   ,M MM    MM       M     `MM.M'    
#              MM        M  Mb  M' MM    MM       M       MMb     
#              MM        M  YM.P'  MM    MM       M     ,M'`Mb.   
#              MM        M  `YM'   MM    YM.     ,M    ,P   `MM.  
#            .JMML.    .JML. `'  .JMML.   `bmmmmd"'  .MM:.  .:MMa.
############################################################################ 


############################################################################
# Global Options
############################################################################
# large history
set-option -g history-limit 10000

# utf8 support
set-window-option -g utf8 on

# Automatically set window title
setw -g automatic-rename on

# Fast typing!
set-option -sg escape-time 1

# Key settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys emacs
set-option -g status-keys emacs

# show activity
set-window-option -g monitor-activity on
set -g visual-activity on

# window title
set-option -g set-titles on
set-option -g set-titles-string '#H:#W'

# global colors
set-option -g default-terminal "screen-256color" #"xterm-256color" # "screen-256color"

# additional-menu colors
setw -g mode-bg black
setw -g mode-fg white

# pane border colors
set-option -g pane-active-border-fg black
set-option -g pane-active-border-bg black

# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on


############################################################################
# Status Bar
############################################################################
set-option -g status-utf8 on
set-option -g status-justify right
set-option -g status-bg black
set-option -g status-fg white
set-option -g status-interval 4
set-option -g status-left-length 130
set-option -g status-left '#[fg=cyan][#(date +"%-I:%M%p %b-%d")] #[fg=red][#H]'
set-option -g status-right ''

set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg black
#setw -g window-status-current-attr reverse
set-window-option -g window-status-format ' #I '
set-window-option -g window-status-current-format '#[fg=cyan][#[default]#I#[fg=cyan]]'

############################################################################
# Bindings & Unbindings
############################################################################

# reload tmux conf
bind-key r source-file ~/.tmux.conf \; display-message "Configuration reloaded"
 
# split horizontally
unbind '"'
bind-key - split-window -v

# split vertically
unbind %
bind-key \ split-window -h
 
 # Navigation: use the vim motion keys to move between panes
bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R
  
# Pane Resizing
bind-key -r H resize-pane -L
bind-key -r J resize-pane -D
bind-key -r K resize-pane -U
bind-key -r L resize-pane -R

# Pane Maximizing [Don't switch windows between using these]
unbind <
bind < new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \; swap-pane -s tmux-zoom.0 \; select-window -t tmux-zoom
unbind >
bind > last-window \; swap-pane -s tmux-zoom.0 \; kill-window -t tmux-zoom

# in-scroll-mode commands
bind-key -t emacs-copy C-v page-down
bind-key -t emacs-copy C-f page-up

# Even out all panes in the current window
bind | select-layout "even-vertical"
bind _ select-layout "even-horizontal"

# list panes
#bind-key Space list-panes

# break-pane
#bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
#bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

unbind C-b
set -g prefix C-q
bind C-q send-prefix
